#include"VECTOR2.h"
#include "Stage.h"
#include"ImageMng.h"
#include"Player.h"
#include"GameTask.h"
#include"CollisionCheck.h"
#include"CHARA_BASE.h"

constexpr int mapChip(64);
constexpr int mapY(16);
constexpr int mapX(19);

Stage::Stage()
{
	//マップ
	Init();
	GameTask::GetInstance().addStageObjectCnt();
	int MapData[MAP_H][MAP_W] =
	{
		{0, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31},
		{32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47},
		{32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47},
		{32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47},
		{32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47},
		{48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63},
		{64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79},
		{80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95},
		{96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111},
		{112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127},
		{128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143},
		{144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159},
		{160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175},
		{176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191},
		{192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207},
		{208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223},
		{224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239},
		{240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255}
	};
	
}

Stage::~Stage()
{
	GameTask::GetInstance().removeStageObjectCnt();
}

void Stage::Init()
{
	ImageMng::GetInstance().SetID("stage1", "image/ステao.png");
	// マップのデータ
	block.x = 0;
	block.y = 0;
	block.w = 700;
	block.h = 450;
}

void Stage::Update()
{
	
}

void Stage::Draw()
{
	//

	ImageMng::GetInstance().DrawImage("stage1", 0,0, true);
	// マップを描く
	for (i = 0; i < MAP_H; i++)
	{
		for (j = 0; j < MAP_W; j++)
		{
			if (MapData[i][j] == 0)
			{
				DrawBox(j * CHIP_SIZE, i * CHIP_SIZE,
					j * CHIP_SIZE + CHIP_SIZE, i * CHIP_SIZE + CHIP_SIZE,
					GetColor(255, 0, 0), false);
			}
		}
	}
}
